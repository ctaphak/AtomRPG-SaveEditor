// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using AtomSaveEditor.Atom.PlayerSave;
//
//    var save = Save.FromJson(jsonString);

namespace AtomSaveEditor.Atom.PlayerSave
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class PlayerSave
    {
        [JsonProperty("class")]
        public string Class { get; set; }

        [JsonProperty("active")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public bool Active { get; set; }

        [JsonProperty("proto")]
        public string Proto { get; set; }

        [JsonProperty("character")]
        public string Character { get; set; }

        [JsonProperty("caps")]
        public string Caps { get; set; }

        [JsonProperty("damage")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Damage { get; set; }

        [JsonProperty("ap")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Ap { get; set; }

        [JsonProperty("relationship")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Relationship { get; set; }

        [JsonProperty("fraction")]
        public string Fraction { get; set; }

        [JsonProperty("shotMode")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long ShotMode { get; set; }

        [JsonProperty("stats")]
        public Stats Stats { get; set; }

        [JsonProperty("inventory")]
        public List<Inventory> Inventory { get; set; }

        [JsonProperty("mainItemIndex")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long MainItemIndex { get; set; }

        [JsonProperty("item1")]
        public Cap Item1 { get; set; }

        [JsonProperty("item2")]
        public Cap Item2 { get; set; }

        [JsonProperty("rucksack")]
        public Cap Rucksack { get; set; }

        [JsonProperty("cap")]
        public Cap Cap { get; set; }

        [JsonProperty("head_mask")]
        public Cap HeadMask { get; set; }

        [JsonProperty("conditions")]
        public Conditions Conditions { get; set; }

        [JsonProperty("effects")]
        public List<Effect> Effects { get; set; }

        [JsonProperty("skin")]
        public string Skin { get; set; }

        [JsonProperty("beard")]
        public string Beard { get; set; }

        [JsonProperty("hair")]
        public string Hair { get; set; }

        [JsonProperty("hairColor")]
        public string HairColor { get; set; }

        [JsonProperty("keywords")]
        public SaveKeywords Keywords { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("transform")]
        public Transform Transform { get; set; }
    }

    public partial class Cap
    {
        [JsonProperty("class")]
        public Class Class { get; set; }

        [JsonProperty("skin", NullValueHandling = NullValueHandling.Ignore)]
        public string Skin { get; set; }

        [JsonProperty("count")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Count { get; set; }

        [JsonProperty("proto")]
        public string Proto { get; set; }

        [JsonProperty("ammo", NullValueHandling = NullValueHandling.Ignore)]
        public Ammo Ammo { get; set; }
    }

    public partial class Ammo
    {
        [JsonProperty("count")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Count { get; set; }

        [JsonProperty("proto")]
        public string Proto { get; set; }
    }

	public partial class Memo
	{
		[JsonProperty("count")]
		[JsonConverter(typeof(FluffyParseStringConverter))]
		public long Count { get; set; }

		[JsonProperty("proto")]
		public string Proto { get; set; }

		[JsonProperty("keywords", NullValueHandling = NullValueHandling.Ignore)]
		public MemoKeywords Keywords { get; set; }
	}

	public class MemoKeywords
	{
		[JsonProperty("__MEMO_SEEN")]
		public string Seen { get; set; }
	}

	public partial class Conditions
    {
        [JsonProperty("toxic")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Toxic { get; set; }

        [JsonProperty("toxicTimer")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long ToxicTimer { get; set; }

        [JsonProperty("radiation")]
        public string Radiation { get; set; }

        [JsonProperty("radiationTimer")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long RadiationTimer { get; set; }

        [JsonProperty("hunger")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Hunger { get; set; }

        [JsonProperty("hungerTimer")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long HungerTimer { get; set; }

        [JsonProperty("hungerDmg")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long HungerDmg { get; set; }

        [JsonProperty("rolling")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Rolling { get; set; }

        [JsonProperty("rollingTimer")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long RollingTimer { get; set; }
    }

    public partial class Effect
    {
        [JsonProperty("proto")]
        public string Proto { get; set; }

        [JsonProperty("timer")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Timer { get; set; }

        [JsonProperty("apply")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Apply { get; set; }
    }

    public partial class Inventory
    {
        [JsonProperty("class")]
        public Class Class { get; set; }

        [JsonProperty("count")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Count { get; set; }

        [JsonProperty("proto")]
        public string Proto { get; set; }

        [JsonProperty("ammo", NullValueHandling = NullValueHandling.Ignore)]
        public Ammo Ammo { get; set; }

        [JsonProperty("keywords", NullValueHandling = NullValueHandling.Ignore)]
        public InventoryKeywords Keywords { get; set; }

        [JsonProperty("skin", NullValueHandling = NullValueHandling.Ignore)]
        public string Skin { get; set; }
    }

    public partial class InventoryKeywords
    {
        [JsonProperty("AchievmenCollect")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long AchievmenCollect { get; set; }
    }

    public partial class SaveKeywords
    {
        [JsonProperty("_TV_SHOW")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long TvShow { get; set; }

        [JsonProperty("CULT_CODE1")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long CultCode1 { get; set; }

        [JsonProperty("CULT_CODE2")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long CultCode2 { get; set; }

        [JsonProperty("Random_seed_levelgen")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long RandomSeedLevelgen { get; set; }

        [JsonProperty("PIN_VILLAGE_BUNKER_SAFE")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long PinVillageBunkerSafe { get; set; }

        [JsonProperty("GOT_CRAFTBOOK_5")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long GotCraftbook5 { get; set; }

        [JsonProperty("GOT_CRAFTBOOK_4")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long GotCraftbook4 { get; set; }

        [JsonProperty("GOT_CRAFTBOOK_6")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long GotCraftbook6 { get; set; }

        [JsonProperty("GOT_CRAFTBOOK_7")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long GotCraftbook7 { get; set; }
    }

    public partial class Stats
    {
        [JsonProperty("level")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Level { get; set; }

        [JsonProperty("xp")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Xp { get; set; }

        [JsonProperty("strength")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Strength { get; set; }

        [JsonProperty("perception")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Perception { get; set; }

        [JsonProperty("endurance")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Endurance { get; set; }

        [JsonProperty("charisma")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Charisma { get; set; }

        [JsonProperty("intelligence")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Intelligence { get; set; }

        [JsonProperty("agility")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Agility { get; set; }

        [JsonProperty("luck")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Luck { get; set; }

        [JsonProperty("skills")]
        public Skills Skills { get; set; }

        [JsonProperty("perks")]
        public List<string> Perks { get; set; }

        [JsonProperty("freeSkillPoints")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long FreeSkillPoints { get; set; }

        [JsonProperty("freeStatPoints")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long FreeStatPoints { get; set; }

        [JsonProperty("freeSpecPoints")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long FreeSpecPoints { get; set; }

        [JsonProperty("specLevel")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long SpecLevel { get; set; }
    }

    public partial class Skills
    {
        [JsonProperty("SmallGuns")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long SmallGuns { get; set; }

        [JsonProperty("BigGuns")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long BigGuns { get; set; }

        [JsonProperty("AutomaticFirearms")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long AutomaticFirearms { get; set; }

        [JsonProperty("Unarmed")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Unarmed { get; set; }

        [JsonProperty("MeleeWeapons")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long MeleeWeapons { get; set; }

        [JsonProperty("Throwing")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Throwing { get; set; }

        [JsonProperty("FirstAid")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long FirstAid { get; set; }

        [JsonProperty("Crafting")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Crafting { get; set; }

        [JsonProperty("Sneak")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Sneak { get; set; }

        [JsonProperty("Lockpick")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Lockpick { get; set; }

        [JsonProperty("Steal")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Steal { get; set; }

        [JsonProperty("Alertness")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Alertness { get; set; }

        [JsonProperty("Science")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Science { get; set; }

        [JsonProperty("Speech")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Speech { get; set; }

        [JsonProperty("Barter")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Barter { get; set; }

        [JsonProperty("Gambling")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Gambling { get; set; }

        [JsonProperty("Outdoorsman")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public long Outdoorsman { get; set; }
    }

    public partial class Transform
    {
        [JsonProperty("pos")]
        public List<string> Pos { get; set; }

        [JsonProperty("rot")]
        public List<string> Rot { get; set; }

        [JsonProperty("scale")]
        public List<string> Scale { get; set; }
    }

    public enum Class { Ammo, Consumable, Item, Uniform, Weapon, Memo };

    public partial class PlayerSave
    {
        public static List<PlayerSave> FromJson(string json) => JsonConvert.DeserializeObject<List<PlayerSave>>(json, AtomSaveEditor.Atom.PlayerSave.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<PlayerSave> self) => JsonConvert.SerializeObject(self, AtomSaveEditor.Atom.PlayerSave.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                ClassConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }

    internal class ClassConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Class) || t == typeof(Class?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "Ammo":
                    return Class.Ammo;
                case "Consumable":
                    return Class.Consumable;
                case "Item":
                    return Class.Item;
                case "Uniform":
                    return Class.Uniform;
                case "Weapon":
                    return Class.Weapon;
				case "Memo":
                    return Class.Memo;
            }
            throw new Exception("Cannot unmarshal type Class");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Class)untypedValue;
            switch (value)
            {
                case Class.Ammo:
                    serializer.Serialize(writer, "Ammo");
                    return;
                case Class.Consumable:
                    serializer.Serialize(writer, "Consumable");
                    return;
                case Class.Item:
                    serializer.Serialize(writer, "Item");
                    return;
                case Class.Uniform:
                    serializer.Serialize(writer, "Uniform");
                    return;
                case Class.Weapon:
                    serializer.Serialize(writer, "Weapon");
                    return;
				case Class.Memo:
                    serializer.Serialize(writer, "Memo");
                    return;
            }
            throw new Exception("Cannot marshal type Class");
        }

        public static readonly ClassConverter Singleton = new ClassConverter();
    }
}
